
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract SampleToken {
    // Contract can have an instance variables.
    
    struct Token {
        string name;
        uint index;
        uint price;
        bool canbesold;
    }

    Token[] myTokens;
    mapping (uint => uint) tokenToOwner;

    function createToken(string name, uint index, uint price, bool canbesold) public {
        tvm.accept();
        //uint i = 0;
        if (myTokens.length > 0) {
           // while (myTokens[i].name != "") {
            for (uint i = 0; i <= myTokens.length - 1; i++) {
                require(name != myTokens[i].name, 101, 'error message');
            }
            //    i += 1;
            //}
        }
        myTokens.push(Token(name, index, price, canbesold));
        uint KeyAsLastNum = myTokens.length - 1;
        tokenToOwner[KeyAsLastNum] = msg.pubkey(); // owner
    }
    
    function getTokenOwner(uint tokenId) public view returns (uint) {
        //tvm.accept();
        return tokenToOwner[tokenId];
    }
    
    function getTokenInfo(uint tokenId) public view returns (string tokenName, uint tokenIndex, uint tokenPrice, bool tokenCanBeSold) {
        tvm.accept();
        //require((myTokens.length > 0) && (tokenId < myTokens.length), 101, 'error message');
        if ((myTokens.length == 0) || (tokenId >= myTokens.length)) revert (101, "error message");
        tokenName = myTokens[tokenId].name;
        tokenIndex = myTokens[tokenId].index;
        tokenPrice = myTokens[tokenId].price;
        tokenCanBeSold = myTokens[tokenId].canbesold;
    }

    function changeOwner(uint tokenId, uint pubKeyOfNewOwner) public {
        require(msg.pubkey() == tokenToOwner[tokenId], 101);
        tvm.accept();
        tokenToOwner[tokenId] = pubKeyOfNewOwner;
    }
    
    function changePrice(uint tokenId, uint price) public {
        require(msg.pubkey() == tokenToOwner[tokenId], 101);
        tvm.accept();
        myTokens[tokenId].price = price;
    }
        
    function tokenSold(uint tokenId) public {
        require(! myTokens[tokenId].canbesold, 101); // "Token can't be sold!");
        tvm.accept();
        //myTokens[tokenId].price = price;
    }
 
    // Contract can have a `constructor` â€“ function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();

    }

 }
